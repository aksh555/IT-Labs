stored proc

select * from employee;

delimiter $$
drop procedure if exists usp_get_employees_salary_above $$
CREATE PROCEDURE usp_get_employees_salary_above(in n int)
BEGIN
select Fname,Lname from employee where Salary>=n order by Fname,Lname;
END
$$

call usp_get_employees_salary_above(30000) $$

drop procedure if exists usp_get_towns_starting_with $$
CREATE PROCEDURE usp_get_towns_starting_with(in nam varchar(20))
BEGIN
select Address from employee where Address like concat(nam,'%') order by Address;
END
$$

call usp_get_towns_starting_with('fe sdb')$$

------

create database movie_rating;
use movie_rating;
/* Delete the tables if they already exist */
drop table if exists Movie;
drop table if exists Reviewer;
drop table if exists Rating;

/* Create the schema for our tables */
create table Movie(mID int, title text, year int, director text);
create table Reviewer(rID int, name text);
create table Rating(rID int, mID int, stars int, ratingDate date);

/* Populate the tables with our data */
insert into Movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into Movie values(102, 'Star Wars', 1977, 'George Lucas');
insert into Movie values(103, 'The Sound of Music', 1965, 'Robert Wise');
insert into Movie values(104, 'E.T.', 1982, 'Steven Spielberg');
insert into Movie values(105, 'Titanic', 1997, 'James Cameron');
insert into Movie values(106, 'Snow White', 1937, null);
insert into Movie values(107, 'Avatar', 2009, 'James Cameron');
insert into Movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

insert into Reviewer values(201, 'Sarah Martinez');
insert into Reviewer values(202, 'Daniel Lewis');
insert into Reviewer values(203, 'Brittany Harris');
insert into Reviewer values(204, 'Mike Anderson');
insert into Reviewer values(205, 'Chris Jackson');
insert into Reviewer values(206, 'Elizabeth Thomas');
insert into Reviewer values(207, 'James Cameron');
insert into Reviewer values(208, 'Ashley White');

insert into Rating values(201, 101, 2, '2011-01-22');
insert into Rating values(201, 101, 4, '2011-01-27');
insert into Rating values(202, 106, 4, null);
insert into Rating values(203, 103, 2, '2011-01-20');
insert into Rating values(203, 108, 4, '2011-01-12');
insert into Rating values(203, 108, 2, '2011-01-30');
insert into Rating values(204, 101, 3, '2011-01-09');
insert into Rating values(205, 103, 3, '2011-01-27');
insert into Rating values(205, 104, 2, '2011-01-22');
insert into Rating values(205, 108, 4, null);
insert into Rating values(206, 107, 3, '2011-01-15');
insert into Rating values(206, 106, 5, '2011-01-19');
insert into Rating values(207, 107, 5, '2011-01-20');
insert into Rating values(208, 104, 3, '2011-01-02');

drop view if exists TNS;
create view TNS as select m.title,re.name,r.stars from ((Rating r right join Movie m on m.mID=r.mID) left join Reviewer re on re.rID=r.rID);
select * from TNS;
select year from Movie m inner join TNS on m.title=TNS.title where TNS.name='Chris Jackson' order by year desc limit 1; 

drop view if exists RatingStats;
create view RatingStats as select title,count(stars) num_ratings,avg(stars) avg_rating from TNS group by title having count(stars)>0;
#select * from RatingStats;
select title from RatingStats where num_ratings>2 order by avg_rating desc limit 1;

SET sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

drop view if exists Favourites;
create view Favourites as select a.rID,b.mID from Rating b inner join (select rID,max(stars) max_star from Rating  group by rID) a on (a.rID=b.rID and b.stars=a.max_star);
#select * from Favourites;
select a.name,b.name,m.title from (((select ra.rId id1,rb.rID id2,ra.mID from Favourites ra inner join Favourites rb where ra.mID=rb.mID and ra.rID<rb.rID) f inner join Movie m on f.mID=m.mID) inner join Reviewer a on f.id1=a.rID) inner join Reviewer b on f.id2=b.rID; 

